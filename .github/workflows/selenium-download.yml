name: Selenium Download Automation

on:
  schedule:
    # Run every day at 2 AM UTC (adjust timezone as needed)
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual triggering
  push:
    branches: [ main ]
    paths:
      - 'selenium_download.py'
      - 'requirements.txt'
      - '.github/workflows/selenium-download.yml'

jobs:
  selenium-download:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg unzip
        # Install Google Chrome
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
    
    - name: Install compatible ChromeDriver
      run: |
        set +e  # Don't exit on error - we have fallbacks
        
        # Get Chrome version
        CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+')
        MAJOR_VERSION=$(echo $CHROME_VERSION | cut -d. -f1)
        echo "Chrome version: $CHROME_VERSION"
        echo "Major version: $MAJOR_VERSION"
        
        # Try to get ChromeDriver version using the JSON API
        echo "Attempting to get ChromeDriver version using JSON API..."
        RESPONSE=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json")
        CHROMEDRIVER_VERSION=$(echo "$RESPONSE" | grep -oP "\"version\": \"${MAJOR_VERSION}\.[0-9]+\.[0-9]+\.[0-9]+\"" | grep -oP "${MAJOR_VERSION}\.[0-9]+\.[0-9]+\.[0-9]+" | head -1)
        
        # If that didn't work, try the LATEST_RELEASE endpoint
        if [[ -z "$CHROMEDRIVER_VERSION" ]]; then
          echo "Trying LATEST_RELEASE endpoint..."
          CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_${MAJOR_VERSION}")
          # Check if we got HTML (404) instead of a version number
          if [[ "$CHROMEDRIVER_VERSION" == *"DOCTYPE"* ]] || [[ "$CHROMEDRIVER_VERSION" == *"<html>"* ]] || [[ "$CHROMEDRIVER_VERSION" == *"404"* ]]; then
            echo "LATEST_RELEASE endpoint returned HTML, trying to find latest version in JSON..."
            CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json" | grep -oP "\"version\": \"[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\"" | tail -1 | grep -oP "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+")
          fi
        fi
        
        # If still no version, try to get any available version for this major version
        if [[ -z "$CHROMEDRIVER_VERSION" ]]; then
          echo "Could not find exact version match, looking for latest compatible version..."
          CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json" | grep -oP "\"version\": \"[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\"" | grep -oP "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" | head -1)
        fi
        
        echo "ChromeDriver version to download: $CHROMEDRIVER_VERSION"
        
        # Download and install ChromeDriver
        CHROMEDRIVER_INSTALLED=false
        if [[ -n "$CHROMEDRIVER_VERSION" ]]; then
          if wget -O /tmp/chromedriver.zip "https://storage.googleapis.com/chrome-for-testing-public/${CHROMEDRIVER_VERSION}/linux64/chromedriver-linux64.zip"; then
            echo "Successfully downloaded ChromeDriver from new API"
            sudo unzip /tmp/chromedriver.zip -d /tmp/
            sudo mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/
            sudo chmod +x /usr/local/bin/chromedriver
            CHROMEDRIVER_INSTALLED=true
          fi
        fi
        
        # Verify installation
        if chromedriver --version; then
          echo "ChromeDriver installed and working"
          CHROMEDRIVER_INSTALLED=true
        else
          echo "ChromeDriver installation failed or not in PATH"
          echo "Python script will use chromedriver_autoinstaller or webdriver-manager instead"
        fi
        
        set -e  # Re-enable exit on error
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r webhook_requirements.txt
    
    - name: Create necessary directories
      run: |
        mkdir -p result_files
        mkdir -p debug_screenshots
        mkdir -p downloaded_files
    
    - name: Set up environment variables
      run: |
        echo "CHROME_BIN=/usr/bin/google-chrome" >> $GITHUB_ENV
        echo "CHROMEDRIVER=/usr/local/bin/chromedriver" >> $GITHUB_ENV
        echo "DISPLAY=:99" >> $GITHUB_ENV
    
    - name: Start virtual display
      run: |
        sudo apt-get install -y xvfb
        Xvfb :99 -screen 0 1920x1080x24 &
        sleep 3
    
    - name: Run selenium download script
      run: |
        echo "Starting selenium download script..."
        echo "Python version: $(python --version)"
        echo "Chrome version: $(google-chrome --version)"
        echo "ChromeDriver version: $(chromedriver --version)"
        echo "Current directory: $(pwd)"
        echo "Files in directory: $(ls -la)"
        echo "Environment variables:"
        echo "CHROME_BIN: $CHROME_BIN"
        echo "CHROMEDRIVER: $CHROMEDRIVER"
        echo "DISPLAY: $DISPLAY"
        echo "Running script..."
        python selenium_download.py
        echo "Script completed with exit code: $?"
      env:
        CHROME_BIN: /usr/bin/google-chrome
        CHROMEDRIVER: /usr/local/bin/chromedriver
        DISPLAY: :99
    
    - name: Update webhook results
      run: |
        echo "Updating webhook with latest results..."
        python update_webhook_results.py || echo "Webhook update failed, continuing..."
    
    - name: Check for new files
      id: check_files
      run: |
        if [ -n "$(find result_files -name "*.csv" -newer selenium_download.py 2>/dev/null)" ]; then
          echo "new_files=true" >> $GITHUB_OUTPUT
          echo "Found new CSV files"
        else
          echo "new_files=false" >> $GITHUB_OUTPUT
          echo "No new CSV files found"
        fi
        echo "Files in result_files:"
        ls -la result_files/ || echo "result_files directory not found"
    
    - name: Upload debug screenshots
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: debug-screenshots
        path: debug_screenshots/
        retention-days: 7
    
    - name: Upload result files
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: result-files
        path: result_files/
        retention-days: 30
    
    - name: Commit and push results
      if: steps.check_files.outputs.new_files == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add result_files/ || echo "No result files to add"
        git add debug_screenshots/ || echo "No debug screenshots to add"
        git commit -m "Automated download: $(date '+%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"
        git push || echo "Push failed"
    
    - name: Summary
      if: always()
      run: |
        echo "=== Selenium Download Summary ==="
        echo "New files found: ${{ steps.check_files.outputs.new_files }}"
        echo "Result files count: $(find result_files -name "*.csv" 2>/dev/null | wc -l || echo 0)"
        echo "Debug screenshots count: $(find debug_screenshots -name "*.png" 2>/dev/null | wc -l || echo 0)"
        echo "=== End Summary ==="