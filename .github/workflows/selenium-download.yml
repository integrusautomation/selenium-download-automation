name: Selenium Download Automation

on:
  schedule:
    # Run every day at 2 AM UTC (adjust timezone as needed)
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual triggering
  push:
    branches: [ main ]
    paths:
      - 'selenium_download.py'

jobs:
  selenium-download:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
    
    - name: Install ChromeDriver
      uses: nanasess/setup-chromedriver@v2
      with:
        # This will automatically detect Chrome version and install matching ChromeDriver
        chromedriver-version: 'latest'
        # Optional: specify a specific version if needed
        # chromedriver-version: '119.0.6045.105'
    
    - name: Set ChromeDriver path
      run: |
        echo "CHROMEDRIVER_PATH=$(which chromedriver)" >> $GITHUB_ENV
        echo "ChromeDriver path: $(which chromedriver)"
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create result_files directory
      run: mkdir -p result_files
    
    - name: Run selenium download script
      run: |
        python selenium_download.py
      env:
        CHROME_BIN: /usr/bin/google-chrome
        CHROMEDRIVER: ${{ env.CHROMEDRIVER_PATH }}
    
    - name: Check for new files
      id: check_files
      run: |
        if [ -n "$(find result_files -name "*.csv" -newer selenium_download.py 2>/dev/null)" ]; then
          echo "new_files=true" >> $GITHUB_OUTPUT
        else
          echo "new_files=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit and push results
      if: steps.check_files.outputs.new_files == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add result_files/
        git add debug_screenshots/ || true
        git commit -m "Automated download: $(date '+%Y-%m-%d %H:%M:%S')" || exit 0
        git push
